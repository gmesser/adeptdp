Adept Data Processing Library
Library Documentation

Library Modules

	------------------------------
	astr
	
		The astr module maintains C strings.  
		
		An astr instance handles the memory allocations during creation and 
		alteration by either appends or edits.  
		
		An astr instance keeps the length of the string in a member where it 
		can be accessed quickly without scanning for the null terminator every 
		time you need to get the length.

		An astr instance is optimized for comparisons.  It maintains a simple
		integer checksum that it uses to quickly detect when strings do not match.
		It accumulates the integer checksum while the instance is being created.
		This is fast, and accumulating the checksum does not slow down creation too
		much.  A hash would have been even better at detecting non-matches, with
		less false matches, but it takes longer to calculate the hash during
		creation and would still require a full comparison to verify that the
		strings are a real match when the hashes match.
		
		The C string member is readily accessible for use by all the standard C
		library methods.

		astr.h - Adept string header
		astr.c - Adept string creations and modification functions.
		astr_classifications.c - Adept string classification functions.
		astr_comparisons.c - Adept string comparison functions.
		astr_conversions.c - Adept string conversions.
		astr_edits.c - Adept string edit functions.
		astr_utilities.c - Adept string utility functions.

	------------------------------
	afile
	
		An afile instance is a thin wrapper around FILE from standard C.  
		
		An afile instance uses astr instances for its internal strings like file
		names, and collects the various FILE settings like open mode, buffer 
		size, and more in one place.
		
		afile.h - Adept file header.
		afile.c - Adept file creation, management, and processing functions.

Example Application

	acatfile - A simple implementation of cat.

Unit Test Driver

	adept_unit_test.h - Adept unit test header.  There is no corresponding .c source file.

Unit Test Programs

	------------------------------
	astr

		test_astr.c
		test_astr_classifications.c
		test_astr_comparisons.c
		test_astr_conversions.c
		test_astr_edits.c
		test_astr_utilities.c

	------------------------------
	afile

		test_afile.c
		test_afile_process.c

	------------------------------
	aclock

		test_aclock.c

Method Documentation

	------------------------------
	astr.c - Adept String

		-----
		astr_create_empty

		Create an empty new astr instance.

		Returns:   Pointer to the astr instance
 

		-----
		astr_copy

		Create a new astr instance that is copied from an existing astr instance.

		Parameter: The source astr instance
		Returns:   Pointer to the astr instance
 

		-----
		astr_create

		Create a new astr instance with contents from a string.
		
		Parameter: The source null-terminated string
		Returns:   Pointer to the astr instance
 

		-----
		astr_create_from_buffer

		Create a new astr instance with contents from a buffer.

		Parameter: The source buffer
		Parameter: The length of the source buffer
		Returns:   Pointer to the astr instance

 
		-----
		astr_printf

		Create a new astr instance with contents from a call to vsnprintf().

		Parameter: The printf format string
		Parameter: The argument list for printf
		Returns:   Pointer to the astr instance


		-----
		astr_set

		(Re)initialize an astr instance with contents from a string.

		Parameter: The astr instance to be reinitialized
		Parameter: The source null-terminated string
		Returns:   Pointer to the astr instance
 

		-----
		astr_set_from_buffer

		(Re)initialize an astr instance with contents from a buffer.

		The string will be right-filled with spaces to the length specified if needed.

		Parameter: The astr instance to be reinitialized
		Parameter: The source buffer
		Parameter: The length of the source buffer
		Returns:   Pointer to the astr instance
 

		-----
		astr_append

		Append a string to an astr instance.

		Parameter: The astr instance to be appended to
		Parameter: The source null-terminated string to be appended
		Returns:   Pointer to the astr instance
 

		-----
		astr_append_buffer

		Append a buffer to an astr instance.

		The string will be right-filled with spaces to the length specified if needed.

		Parameter: The astr instance to be reinitialized
		Parameter: The source buffer
		Parameter: The length of the source buffer
		Returns:   Pointer to the astr instance
 

		-----
		astr_allocate_string

		Allocate the string member of an astr instance.

		Parameter: The astr instance
		Parameter: The length of the string member
		Returns:   Pointer to the astr instance
 

		-----
		astr_reallocate_string

		Reallocate the string member of an astr instance.

		Parameter: The astr instance
		Parameter: The new length of the string member
		Returns:   Pointer to the astr instance
 

		-----
		astr_clear

		Clear an astr instance.
		Keep the storage allocation, set the other members to zero.

		Parameter: The astr instance
		Returns:   Pointer to the astr instance
 

		-----
		astr_free_string

		Free the string member of an astr instance.
		Free the storage allocation, set all members to zero.

		Parameter: The astr instance
		Returns:   Pointer to the astr instance
 

		-----
		astr_free

		Free an astr instance.
		Frees the allocated memory for the string member, then frees the memory for
		the astr instance itself.

		Parameter: The astr instance
		Returns:   NULL pointer
 

	------------------------------
	astr_compare.c - Adept String comparison functions

		-----
		astr_equals

		Determine if two astr instances are equal.

		Quickly determines if they are NOT equal by comparing the checksums.
		If the checksums do not match, the strings are not equal.  One integer
		comparison quickly detects if the strings are not equal.
		If the checksums match, do the full comparison to confirm equality.

		Parameter: The first astr instance
		Parameter: The second astr instance
		Returns:   1 if equal, 0 if not
 

		-----
		astr_prefix_equals

		Determine if the prefixes of two astr instances are equal.

		Parameter: The first astr instance
		Parameter: The second astr instance
		Parameter: The number of prefix characters to compare
		Returns:   1 if equal, 0 if not
 

		-----
		astr_less_than

		Determine if one astr instance is less than another.

		Convenience method.

		Parameter: The first astr instance
		Parameter: The second astr instance
		Returns:   1 if as1<as2, 0 if not
 

		-----
		astr_greater_than

		Determine if one astr instance is greater than another.

		Convenience method.

		Parameter: The first astr instance
		Parameter: The second astr instance
		Returns:   1 if as1>as2, 0 if not
 

		-----
		astr_compare

		Compare two astr instances.
		A simple wrapper around strcmp();

		If one instance pointer is null and the other isn't, or
		if the string in one instance is null and the other isn't,
		the null instance or string is reported to be less than the non-null.
		Two null instance pointers, or two instances with null strings, are equal.

		Parameter: The first astr instance
		Parameter: The second astr instance
		Returns:   <0 if as1<as2, 0 if as1==as2, >0 if as1>as2
		See also:  strcmp()
 

		-----
		astr_prefix_compare

		Compare the first n characters of two astr instances.
		A simple wrapper around strncmp();

		If one instance pointer is null and the other isn't, or
		if the string in one instance is null and the other isn't,
		the null instance or string is reported to be less than the non-null.
		Two null instance pointers, or two instances with null strings, are equal.

		Parameter: The first astr instance
		Parameter: The second astr instance
		Parameter: The number of prefix characters to compare
		Returns:   <0 if as1<as2, 0 if as1==as2, >0 if as1>as2
		See also:  strncmp()
 

	------------------------------
	astr_conversions.c - Adept String conversion functions

		Functions to convert the contents of an astr instance to a numeric value in
		the safest way, insofar as they detect when there are characters in the
		value that are not numeric.  
		Note that these functions set the global errno if there is a problem
		converting the value.
 

		-----
		astr_to_long

		Convert the astr instance string to a long.

		Parameter: The astr instance to be evaluated
		Errno:     EINVAL if the string is an invalid number
		           EDOM if the string is NULL or empty
		           0 if the string was successfully evaluated
		Returns:   The evaluated long value of the string
 

		-----
		astr_to_double

		Convert the astr instance string to a double.

		Parameter: The astr instance to be evaluated
		Errno:     EINVAL if the string is an invalid number
		           EDOM if the string is NULL or empty
		           0 if the string was successfully evaluated
		Returns:   The evaluated long value of the string
 

	------------------------------
	astr_edits.c - Adept String edit functions

		These functions edit the contents of an astr instance.
 
		-----
		astr_to_upper_case

		Convert all of the characters in the astr string to upper case.

		Parameter: The astr instance to be edited
		Returns:   Pointer to the astr instance
 

		-----
		astr_to_lower_case

		Convert all of the characters in the astr string to lower case.

		Parameter: The astr instance to be edited
		Returns:   Pointer to the astr instance
 

		-----
		astr_to_mixed_case

		Convert all of the characters in the astr string to mixed case.
		The initial letter of each word will be upper case,
		the rest of the characters in each word will be lower case.
		A word is considered to be a series of characters where each character
		satisfies the standard isalnum() test;

		Parameter: The astr instance to be edited
		Returns:   Pointer to the astr instance
 

		-----
		astr_left_trim

		Trim the left (leading) spaces of the astr string.

		Parameter: The astr instance to be edited
		Returns:   Pointer to the astr instance
 

		-----
		astr_right_trim

		Trim the right (trailing) spaces of the astr string.

		Parameter: The astr instance to be edited
		Returns:   Pointer to the astr instance
 

		-----
		astr_trim

		Trim the left and right spaces of the astr string.

		Parameter: The astr instance to be edited
		Returns:   Pointer to the astr instance
 

		-----
		astr_pack

		Replace multiple space characters in the astr string with one space character.

		Parameter: The astr instance to be edited
		Returns:   Pointer to the astr instance
 

		-----
		astr_clean

		Trim and pack the spaces in the astr string.

		Parameter: The astr instance to be edited
		Returns:   Pointer to the astr instance
 

		-----
		astr_not_empty

		Make sure the astr string is not empty (or NULL), use space for the single character.

		Parameter: The astr instance to be edited
		Returns:   Pointer to the astr instance
 

		-----
		astr_not_empty_char
		
		Make sure the astr string is not empty (or NULL), use the specified single character.

		Parameter: The astr instance to be edited
		Parameter: The character to use as the sole character if necessary
		Returns:   Pointer to the astr instance
 

	------------------------------
	astr_utilities.c - Adept String utility functions

		General-purpose utility functions.
 
		-----
		astr_calc_checksum

		Calculate the checksum for an astr instance.

		Parameter: The astr instance
		Returns:	  The checksum of the string in an astr instance.
 

		-----
		astr_print

		Print an astr instance in labeled string format.
 

		-----
		astr_print_string

		Print the string in an astr instance.
 

		-----
		astr_print_struct

		Print an astr structure.
		Label: NNNNNNNNN\n
 

		-----
		astr_hexdump

		Dump an astr instance in hex dump format.
		This function dumps the structure and the string.

		Parameter: The astr instance
		Returns:	  The address of the null-terminated destination buffer.
 

		-----
		astr_hexdump_string

		Dump the string in an astr instance in hex dump format.

		Parameter: The astr instance
		Returns:	  The address of the null-terminated destination buffer.
 
		// Calculate the size of the buffer required to hold the hex dump.
		// Allocate the buffer to hold the hex dump.
		// If the allocation worked, write the hex dump into the input buffer.

		-----
		astr_hexdump_struct

		Dump an astr structure instance in hex dump format.

		Parameter: The astr instance
		Returns:	  The address of the null-terminated destination buffer.
 
		// Calculate the size of the buffer required to hold the hex dump.
		// Allocate the buffer to hold the hex dump.
		// If the allocation worked, write the hex dump into the input buffer.

		-----
		dump_buffer

		Dump a buffer.

		This function dumps a buffer in the familiar dump format of DEBUG,
		with 16 hexadecimal values per line on the left and 16 ASCII
		characters per line on the right.  Unprintable ASCII characters show
		as '.'.

		The destination buffer must be large enough to contain the dumped
		bytes.  The size of the destination buffer can be found using the
		following equation:

					(74		((buflen / 16) + (buflen % 16))) + 1

		Output:

		00000  41 20 6C 6F 6E 67 20 73 74 72 69 6E 67 20 74 68  A long string th
		00010  61 74 20 69 73 20 6D 75 63 68 20 6C 6F 6E 67 CC  at is much long.
		----=----1----=----2----=----3----=----4----=----5----=----6----=----7----=
		                                          Buffer with LF eol ends at 73 ^
		                                        Buffer with CR/LF eol ends at 74 ^

		Parameter: dst    - address of the destination buffer
		Parameter: dstlen - length of the destination buffer
		Parameter: src     - address of the buffer to be dumped
		Parameter: srclen  - length of the buffer to be dumped
		Returns:	  The address of the null-terminated destination buffer.
 

	------------------------------
	afile.c - Adept File 

		File processing functions.
 

		-----
		afile_create

		Create an afile instance with default parameters.

		Parameter: The file specification (optional path, file name)
		Parameter: The file open modes
 

		-----
		afile_create_explicit

		Create an afile instance with the specified explicit parameters.

		Parameter: The file specification (optional path, file name)
		Parameter: The file open modes
		Parameter: The file buffer size
		Parameter: The file buffering mode
		Returns:   Pointer to the afile instance
 

		-----
		afile_set_filespec

		Initialize an afile file specification.

		This can only be set before the file is opened.

		Parameter: The file specification (optional path, file name)
 

		-----
		afile_set_open_modes

		Initialize an afile open mode string.

		This can only be set before the file is opened.

		Parameter: The file open modes
 

		-----
		afile_set_buffering_mode

		Initialize an afile buffering mode.

		This can only be set before the file is opened.

		Parameter: The file buffering mode
 

		-----
		afile_set_buffer_size

		Initialize an afile buffer size.

		This can only be set before the file is opened.

		Parameter: The file buffer size
 

		-----
		afile_open

		Open the file.

		Parameter: The afile instance
		Returns:   0 = success, non-zero = errno value from the failed operation
 

		-----
		afile_close

		Close the file.

		Parameter: The afile instance
		Returns:   0 = success, non-zero = errno value from the failed operation
 

		-----
		afile_free

		Free the memory allocated for the file.

		Parameter: The afile instance
 

		-----
		afile_process_lines

		Process all lines from a file.

		Read lines from a file and call the specified function to process each line.

		We have to use an intermediate buffer to read the bytes of the file into.
		It is not possible to know the length of the strings being read, so the
		intermediate buffer is allocated to be the size of the file buffer.  This
		is much larger than necessary.  There is room here for adjustment.  Perhaps
		1/4th the size, or some other fraction, can be used.

		Parameter: An open file
		Parameter: A pointer to a function that will process one line of text
		Returns:   The number of lines processed
 

		-----
		afile_process_matching_lines

		Process matching lines from a file.

		Read lines from a file and call the specified function to process each line.

		Parameter: An open file
		Parameter: A pointer to a function that will match one line of text
		Parameter: A pointer to a function that will process one line of text
		Returns:   The number of lines processed
 

		-----
		afile_print

		Print an afile instance in labeled string format.
 
		-----
		afile_print_struct
		
		Print an afile structure.
		Label: NNNNNNNNN\n
 
	------------------------------
	aclock.c - Adept Clock

		-----
		aclock_diff

		Calculate the difference between two time values.

		Parameter: The start time
		Parameter: The end time
		Returns: The difference in secods between the two times


		-----
		aclock_current_time

		Get the current CPU clock in seconds.

		This clock measures the number of CPU clock ticks used by the program.  If
		the program calls sleep() or if the program is interrupted by the operating
		system, those clock ticks are not included in the number of clock ticks
		returned to the function by the clock() function.

		Returns: The current CPU clock (system-dependent, normally in milliseconds)


		-----
		aclock_create

		Create an aclock structure and start it.

		Returns: A new, running, aclock instance


		-----
		aclock_free

		Free an aclock structure

		Parameter: The aclock instance
		Returns: NULL pointer


		-----
		aclock_init

		Initialize the members of a clock structure.

		Parameter: The aclock instance
		Returns: The current elapsed time


		-----
		aclock_restart

		Restart a clock.

		Parameter: The aclock instance
		Returns: The current elapsed time


		-----
		aclock_start

		Either start the clock
		at the current time or restarts the
		clock at 0.0.

		Calling aclock_start() while the clock is
		running restarts it at 0.0.

		Calling aclock_start() while the clock is
		stopped effectively restarts it at the
		current time by adjusting the start
		and lastlap times by the amount of time
		that the clock was stopped.

		Parameter: The aclock instance
		Returns: The current elapsed time


		-----
		aclock_stop

		Record the time when the
		clock is stopped.  When stopped,
		the recorded value is used in the elapsed
		time calculation.  The clock
		remains stopped until the aclock_start()
		function is called to restart it.

		Parameter: The aclock instance
		Returns: The current elapsed time


		-----
		aclock_reset

		Stop the clock and initialize all times to the
		current time.
		The aclock_start() function must be called to
		restart it.

		Parameter: The aclock instance
		Returns: The current elapsed time


		-----
		aclock_loop

		Calculate the number of seconds
		since loop() was last called
		Reset the loop timer to zero.

		Parameter: The aclock instance
		Returns: The number of seconds since loop() was last called


		-----
		checkloop

		Calculate the number of seconds
		since loop() was last called.
		Does not reset the loop timer.

		Parameter: The aclock instance
		Returns: The number of seconds since loop() was last called


		-----
		aclock_elapsed

		Calculate the elapsed time in
		seconds that the clock has been
		running.

		Parameter: The aclock instance
		Returns: The current elapsed time


		-----
		aclock_isstopped

		Indicate if the clock is currently stopped.

		Parameter: The aclock instance
		Return: Non-zero if the clock is stopped, and zero if it is running


		-----
		aclock_elapsedDHMS

		Break out the elapsed time into days,
		hours, minutes, and seconds.  Those
		are returned in the passed parameters.

		Parameter: The elapsed time
		Parameter: A pointer to a double to store the number of days of elapsed time
		Parameter: A pointer to a double to store the number of hours of elapsed time in the days
		Parameter: A pointer to a double to store the number of minutes of elapsed time in the hour
		Parameter: A pointer to a double to store the number of seconds of elapsed time in the minute
		Returns: The passed-in elapsed time
