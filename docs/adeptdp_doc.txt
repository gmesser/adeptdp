Adept Data Processing Library
Library Documentation

Library Modules

	------------------------------
	astr
	
		The astr module maintains C strings.  
		
		An astr instance handles the memory allocations during creation and 
		alteration by either appends or edits.  
		
		An astr instance keeps the length of the string in a member where it 
		can be accessed quickly without scanning for the null terminator every 
		time you need to get the length.

		An astr instance is optimized for comparisons.  It maintains a simple
		integer checksum that it uses to quickly detect when strings do not match.
		It accumulates the integer checksum while the instance is being created.
		This is fast, and accumulating the checksum does not slow down creation too
		much.  A hash would have been even better at detecting non-matches, with
		less false matches, but it takes longer to calculate the hash during
		creation and would still require a full comparison to verify that the
		strings are a real match when the hashes match.
		
		The astr members are readily accessible for use by all the standard C
		library functions in addition to the functions provided by the module.
		Modifying the internal members, though, could put the instance in an
		inconsistent state.

		astr.h - Adept string header
		astr.c - Adept string creations and modification functions.
		astr_classifications.c - Adept string classification functions.
		astr_comparisons.c - Adept string comparison functions.
		astr_conversions.c - Adept string conversions.
		astr_edits.c - Adept string edit functions.
		astr_utilities.c - Adept string utility functions.

	------------------------------
	afile
	
		An afile instance is a thin wrapper around FILE from standard C.  
		
		An afile instance uses astr instances for its internal strings like file
		names, and collects the various FILE settings like open mode, buffer 
		size, and more in one place.
		
		The afile members are readily accessible for use by all the standard C
		library functions in addition to the functions provided by the module.
		Modifying the internal members, though, could put the instance in an
		inconsistent state.

		afile.h - Adept file header.
		afile.c - Adept file creation, management, and processing functions.

	------------------------------
	aclock

		An aclock instance is a timer which uses the cpu clock to measure elapsed 
		time. 

		An aclock measures the number of CPU clock ticks used by the process.  If
		the process calls sleep() or if the process is interrupted by the operating
		system, those clock ticks are not included in the number of clock ticks
		returned to the function by the clock() function.
		
		The aclock members are readily accessible for use by all the standard C
		library functions in addition to the functions provided by the module.
		Modifying the internal members, though, could put the instance in an
		inconsistent state.

		aclock.h - Adept clock header.
		aclock.c - Adept clock creation and management functions.
	
	------------------------------
	atm

		An atm instance is a date and time module that holds date and time
		elements and a comparison mode which will determine how the instances
		will compare to each other.

		An atm holds a time_t, and two struct tm elements with the gmtime and the
		localtime.  These elements are different forms of the same time.

		An atm instance provides comparison functions using one of three
		comparison modes:

			DATEANDTIME - compare year, month, day, hour, minute, and seconds.
				Answers "Did two things happen at the same time on the same day?"

			DATEONLY - compare year, month, and day, ignoring the time.
				Determine if the time is at any time on the same day.
				Answers "Did two things happen on the same day?"

			TIMEONLY - compare hour, minute, and second, ignoring the date.
				Determine if the time is the same as a time on a different day.
				Answers "Did two things happen at the same time of day?"

		The atm members are readily accessible for use by all the standard C
		library functions in addition to the functions provided by the module.
		Modifying the internal members, though, could put the instance in an
		inconsistent state.

		atm.h - Adept time header
		atm.c - Adept time creation and management functions.


	------------------------------
	atm_range

		An atm_range instance holds a pair of atm instances representing the
		start and end time of a range.

		An atm instance provides comparison functions using the same three
		comparison modes provided by the atm instances.

		The comparison functions
		determine if one atm instance is within the range or not.

		The atm_range members are readily accessible for use by all the standard C
		library functions in addition to the functions provided by the module.
		Modifying the internal members, though, could put the instance in an
		inconsistent state.

		atm_range.h - Adept time range header
		atm_range.c - Adept time range creation and management functions.

Example Application

	acatfile - A simple implementation of cat.

Unit Test Driver

	adept_unit_test.h - Adept unit test header.  There is no corresponding .c source file.

Unit Test Programs

	------------------------------
	astr

		test_astr.c
		test_astr_classifications.c
		test_astr_comparisons.c
		test_astr_conversions.c
		test_astr_edits.c
		test_astr_utilities.c

	------------------------------
	afile

		test_afile.c
		test_afile_process.c

	------------------------------
	aclock

		test_aclock.c

	------------------------------
	atm

		test_atm.c

	------------------------------
	atm_range

		test_atm_range.c

Method Documentation

	------------------------------
	astr.c - Adept String

		-----
		astr_create_empty

		Create an empty new astr instance.

		Return:    Pointer to the astr instance
 

		-----
		astr_copy

		Create a new astr instance that is copied from an existing astr instance.

		Parameter: The source astr instance
		Return:    Pointer to the astr instance
 

		-----
		astr_create

		Create a new astr instance with contents from a string.
		
		Parameter: The source null-terminated string
		Return:    Pointer to the astr instance
 

		-----
		astr_create_from_buffer

		Create a new astr instance with contents from a buffer.

		Parameter: The source buffer
		Parameter: The length of the source buffer
		Return:    Pointer to the astr instance

 
		-----
		astr_printf

		Create a new astr instance with contents from a call to vsnprintf().

		Parameter: The printf format string
		Parameter: The argument list for printf
		Return:    Pointer to the astr instance


		-----
		astr_tok

		Create a new astr with contents from one token at a time from an astr
		instance, delimited by delims.

		The delimiters can be different for each call to astr_tok.
		Once you start extracting tokens from an astr instance, subsequent calls
		will continue extracting tokens.

		Just like the standard C library function strtok, a null byte is written
		to the source astr's string at the end of each token.  You will need to
		copy the original astr instance if you need it in its original form later.

		Parameter: The astr instance to be tokenized
		Parameter: The string containing the delimiters
		Return:    Pointer to the new astr instance


		-----
		astr_split

		Create an array of new astr instances with contents from all the tokens
		from an astr instance, delimited by delims.

		Just like the standard C library function strtok, a null byte is written
		to the source astr's string at the end of each token.  You will need to
		copy the original astr instance if you need it in its original form later.

		Parameter: The astr instance to be tokenized
		Parameter: The string containing the delimiters
		Return:    Pointer to an array of astr pointers.  The last array element
				will be a NULL pointer for a terminator.


		-----
		astr_set

		(Re)initialize an astr instance with contents from a string.

		Parameter: The astr instance to be reinitialized
		Parameter: The source null-terminated string
		Return:    Pointer to the astr instance
 

		-----
		astr_set_from_buffer

		(Re)initialize an astr instance with contents from a buffer.

		The string will be right-filled with spaces to the length specified if needed.

		Parameter: The astr instance to be reinitialized
		Parameter: The source buffer
		Parameter: The length of the source buffer
		Return:    Pointer to the astr instance
 

		-----
		astr_append

		Append a string to an astr instance.

		Parameter: The astr instance to be appended to
		Parameter: The source null-terminated string to be appended
		Return:    Pointer to the astr instance
 

		-----
		astr_append_buffer

		Append a buffer to an astr instance.

		The string will be right-filled with spaces to the length specified if needed.

		Parameter: The astr instance to be reinitialized
		Parameter: The source buffer
		Parameter: The length of the source buffer
		Return:    Pointer to the astr instance
 

		-----
		astr_allocate_string

		Allocate the string member of an astr instance.

		Parameter: The astr instance
		Parameter: The length of the string member
		Return:    Pointer to the astr instance
 

		-----
		astr_reallocate_string

		Reallocate the string member of an astr instance.

		Parameter: The astr instance
		Parameter: The new length of the string member
		Return:    Pointer to the astr instance
 

		-----
		astr_clear

		Clear an astr instance.
		Keep the storage allocation, set the other members to zero.

		Parameter: The astr instance
		Return:    Pointer to the astr instance
 

		-----
		astr_free_string

		Free the string member of an astr instance.
		Free the storage allocation, set all members to zero.

		Parameter: The astr instance
		Return:    Pointer to the astr instance
 

		-----
		astr_free

		Free an astr instance.
		Frees the allocated memory for the string member, then frees the memory for
		the astr instance itself.

		Parameter: The astr instance
		Return:    NULL pointer
 

	------------------------------
	astr_compare.c - Adept String comparison functions

		-----
		astr_equals

		Determine if two astr instances are equal.

		Quickly determines if they are NOT equal by comparing the checksums.
		If the checksums do not match, the strings are not equal.  One integer
		comparison quickly detects if the strings are not equal.
		If the checksums match, do the full comparison to confirm equality.

		Parameter: The first astr instance
		Parameter: The second astr instance
		Return:    1 if equal, 0 if not
 

		-----
		astr_prefix_equals

		Determine if the prefixes of two astr instances are equal.

		Parameter: The first astr instance
		Parameter: The second astr instance
		Parameter: The number of prefix characters to compare
		Return:    1 if equal, 0 if not
 

		-----
		astr_less_than

		Determine if one astr instance is less than another.

		Convenience method.

		Parameter: The first astr instance
		Parameter: The second astr instance
		Return:    1 if as1<as2, 0 if not
 

		-----
		astr_greater_than

		Determine if one astr instance is greater than another.

		Convenience method.

		Parameter: The first astr instance
		Parameter: The second astr instance
		Return:    1 if as1>as2, 0 if not
 

		-----
		astr_compare

		Compare two astr instances.
		A simple wrapper around strcmp();

		If one instance pointer is null and the other isn't, or
		if the string in one instance is null and the other isn't,
		the null instance or string is reported to be less than the non-null.
		Two null instance pointers, or two instances with null strings, are equal.

		Parameter: The first astr instance
		Parameter: The second astr instance
		Return:    <0 if as1<as2, 0 if as1==as2, >0 if as1>as2
		See also:  strcmp()
 

		-----
		astr_prefix_compare

		Compare the first n characters of two astr instances.
		A simple wrapper around strncmp();

		If one instance pointer is null and the other isn't, or
		if the string in one instance is null and the other isn't,
		the null instance or string is reported to be less than the non-null.
		Two null instance pointers, or two instances with null strings, are equal.

		Parameter: The first astr instance
		Parameter: The second astr instance
		Parameter: The number of prefix characters to compare
		Return:    <0 if as1<as2, 0 if as1==as2, >0 if as1>as2
		See also:  strncmp()
 

	------------------------------
	astr_conversions.c - Adept String conversion functions

		Functions to convert the contents of an astr instance to a numeric value in
		the safest way, insofar as they detect when there are characters in the
		value that are not numeric.  
		Note that these functions set the global errno if there is a problem
		converting the value.
 

		-----
		astr_to_long

		Convert the astr instance string to a long.

		Parameter: The astr instance to be evaluated
		Errno:     EINVAL if the string is an invalid number
		           EDOM if the string is NULL or empty
		           0 if the string was successfully evaluated
		Return:    The evaluated long value of the string
 

		-----
		astr_to_double

		Convert the astr instance string to a double.

		Parameter: The astr instance to be evaluated
		Errno:     EINVAL if the string is an invalid number
		           EDOM if the string is NULL or empty
		           0 if the string was successfully evaluated
		Return:    The evaluated double value of the string
 

	------------------------------
	astr_edits.c - Adept String edit functions

		These functions edit the contents of an astr instance.
 
		-----
		astr_to_upper_case

		Convert all of the characters in the astr string to upper case.

		Parameter: The astr instance to be edited
		Return:    Pointer to the astr instance
 

		-----
		astr_to_lower_case

		Convert all of the characters in the astr string to lower case.

		Parameter: The astr instance to be edited
		Return:    Pointer to the astr instance
 

		-----
		astr_to_mixed_case

		Convert all of the characters in the astr string to mixed case.
		The initial letter of each word will be upper case,
		the rest of the characters in each word will be lower case.
		A word is considered to be a series of characters where each character
		satisfies the standard isalnum() test;

		Parameter: The astr instance to be edited
		Return:    Pointer to the astr instance
 

		-----
		astr_left_trim

		Trim the left (leading) spaces of the astr string.

		Parameter: The astr instance to be edited
		Return:    Pointer to the astr instance
 

		-----
		astr_right_trim

		Trim the right (trailing) spaces of the astr string.

		Parameter: The astr instance to be edited
		Return:    Pointer to the astr instance
 

		-----
		astr_trim

		Trim the left and right spaces of the astr string.

		Parameter: The astr instance to be edited
		Return:    Pointer to the astr instance
 

		-----
		astr_pack

		Replace multiple space characters in the astr string with one space character.

		Parameter: The astr instance to be edited
		Return:    Pointer to the astr instance
 

		-----
		astr_clean

		Trim and pack the spaces in the astr string.

		Parameter: The astr instance to be edited
		Return:    Pointer to the astr instance
 

		-----
		astr_not_empty

		Make sure the astr string is not empty (or NULL), use space for the single character.

		Parameter: The astr instance to be edited
		Return:    Pointer to the astr instance
 

		-----
		astr_not_empty_char
		
		Make sure the astr string is not empty (or NULL), use the specified single character.

		Parameter: The astr instance to be edited
		Parameter: The character to use as the sole character if necessary
		Return:    Pointer to the astr instance
 

	------------------------------
	astr_utilities.c - Adept String utility functions

		General-purpose utility functions.
 
		-----
		astr_calc_checksum

		Calculate the checksum for an astr instance.

		Parameter: The astr instance
		Return:	  The checksum of the string in an astr instance.
 

		-----
		astr_print

		Print an astr instance in labeled string format.
 

		-----
		astr_print_string

		Print the string in an astr instance.
 

		-----
		astr_print_struct

		Print an astr structure.
		Label: NNNNNNNNN\n
 

		-----
		astr_hexdump

		Dump an astr instance in hex dump format.
		This function dumps the structure and the string.

		Parameter: The astr instance
		Return:	  The address of the null-terminated destination buffer.
 

		-----
		astr_hexdump_string

		Dump the string in an astr instance in hex dump format.

		Parameter: The astr instance
		Return:	  The address of the null-terminated destination buffer.
 
		// Calculate the size of the buffer required to hold the hex dump.
		// Allocate the buffer to hold the hex dump.
		// If the allocation worked, write the hex dump into the input buffer.

		-----
		astr_hexdump_struct

		Dump an astr structure instance in hex dump format.

		Parameter: The astr instance
		Return:	  The address of the null-terminated destination buffer.
 
		// Calculate the size of the buffer required to hold the hex dump.
		// Allocate the buffer to hold the hex dump.
		// If the allocation worked, write the hex dump into the input buffer.

		-----
		dump_buffer

		Dump a buffer.

		This function dumps a buffer in the familiar dump format of DEBUG,
		with 16 hexadecimal values per line on the left and 16 ASCII
		characters per line on the right.  Unprintable ASCII characters show
		as '.'.

		The destination buffer must be large enough to contain the dumped
		bytes.  The size of the destination buffer can be found using the
		following equation:

					(74		((buflen / 16) + (buflen % 16))) + 1

		Output:

		00000  41 20 6C 6F 6E 67 20 73 74 72 69 6E 67 20 74 68  A long string th
		00010  61 74 20 69 73 20 6D 75 63 68 20 6C 6F 6E 67 CC  at is much long.
		----=----1----=----2----=----3----=----4----=----5----=----6----=----7----=
		                                          Buffer with LF eol ends at 73 ^
		                                        Buffer with CR/LF eol ends at 74 ^

		Parameter: dst    - address of the destination buffer
		Parameter: dstlen - length of the destination buffer
		Parameter: src     - address of the buffer to be dumped
		Parameter: srclen  - length of the buffer to be dumped
		Return:	  The address of the null-terminated destination buffer.
 

	------------------------------
	afile.c - Adept File 

		File processing functions.
 

		-----
		afile_create

		Create an afile instance with default parameters.

		Parameter: The file specification (optional path, file name)
		Parameter: The file open modes
 

		-----
		afile_create_explicit

		Create an afile instance with the specified explicit parameters.

		Parameter: The file specification (optional path, file name)
		Parameter: The file open modes
		Parameter: The file buffer size
		Parameter: The file buffering mode
		Return:    Pointer to the afile instance
 

		-----
		afile_set_filespec

		Initialize an afile file specification.

		This can only be set before the file is opened.

		Parameter: The file specification (optional path, file name)
 

		-----
		afile_set_open_modes

		Initialize an afile open mode string.

		This can only be set before the file is opened.

		Parameter: The file open modes
 

		-----
		afile_set_buffering_mode

		Initialize an afile buffering mode.

		This can only be set before the file is opened.

		Parameter: The file buffering mode
 

		-----
		afile_set_buffer_size

		Initialize an afile buffer size.

		This can only be set before the file is opened.

		Parameter: The file buffer size
 

		-----
		afile_open

		Open the file.

		Parameter: The afile instance
		Return:    0 = success, non-zero = errno value from the failed operation
 

		-----
		afile_close

		Close the file.

		Parameter: The afile instance
		Return:    0 = success, non-zero = errno value from the failed operation
 

		-----
		afile_free

		Free the memory allocated for the file.

		Parameter: The afile instance
 

		-----
		afile_process_lines

		Process all lines from a file.

		Read lines from a file and call the specified function to process each line.

		We have to use an intermediate buffer to read the bytes of the file into.
		It is not possible to know the length of the strings being read, so the
		intermediate buffer is allocated to be the size of the file buffer.  This
		is much larger than necessary.  There is room here for adjustment.  Perhaps
		1/4th the size, or some other fraction, can be used.

		Parameter: An open file
		Parameter: A pointer to a function that will process one line of text
		Return:    The number of lines processed
 

		-----
		afile_process_matching_lines

		Process matching lines from a file.

		Read lines from a file and call the specified function to process each line.

		Parameter: An open file
		Parameter: A pointer to a function that will match one line of text
		Parameter: A pointer to a function that will process one line of text
		Return:    The number of lines processed
 

		-----
		afile_print

		Print an afile instance in labeled string format.
 
		-----
		afile_print_struct
		
		Print an afile structure.
		Label: NNNNNNNNN\n
 
	------------------------------
	aclock.c - Adept Clock

		-----
		aclock_diff

		Calculate the difference between two time values.

		Parameter: The start time
		Parameter: The end time
		Return: The difference in seconds between the two times


		-----
		aclock_current_time

		Get the current CPU clock in seconds.

		This clock measures the number of CPU clock ticks used by the process.  If
		the process calls sleep() or if the process is interrupted by the operating
		system, those clock ticks are not included in the number of clock ticks
		returned to the function by the clock() function.

		Return: The current CPU clock (system-dependent, normally in milliseconds)


		-----
		aclock_create

		Create an aclock structure and start it.

		Return: A new, running, aclock instance


		-----
		aclock_free

		Free an aclock structure

		Parameter: The aclock instance
		Return: NULL pointer


		-----
		aclock_init

		Initialize the members of a clock structure.

		Parameter: The aclock instance
		Return: The current elapsed time


		-----
		aclock_restart

		Restart a clock.

		Parameter: The aclock instance
		Return: The current elapsed time


		-----
		aclock_start

		Either start the clock
		at the current time or restarts the
		clock at 0.0.

		Calling aclock_start() while the clock is
		running restarts it at 0.0.

		Calling aclock_start() while the clock is
		stopped effectively restarts it at the
		current time by adjusting the start
		and lastlap times by the amount of time
		that the clock was stopped.

		Parameter: The aclock instance
		Return: The current elapsed time


		-----
		aclock_stop

		Record the time when the
		clock is stopped.  When stopped,
		the recorded value is used in the elapsed
		time calculation.  The clock
		remains stopped until the aclock_start()
		function is called to restart it.

		Parameter: The aclock instance
		Return: The current elapsed time


		-----
		aclock_reset

		Stop the clock and initialize all times to the
		current time.
		The aclock_start() function must be called to
		restart it.

		Parameter: The aclock instance
		Return: The current elapsed time


		-----
		aclock_loop

		Calculate the number of seconds
		since loop() was last called
		Reset the loop timer to zero.

		Parameter: The aclock instance
		Return: The number of seconds since loop() was last called


		-----
		checkloop

		Calculate the number of seconds
		since loop() was last called.
		Does not reset the loop timer.

		Parameter: The aclock instance
		Return: The number of seconds since loop() was last called


		-----
		aclock_elapsed

		Calculate the elapsed time in
		seconds that the clock has been
		running.

		Parameter: The aclock instance
		Return: The current elapsed time


		-----
		aclock_isstopped

		Indicate if the clock is currently stopped.

		Parameter: The aclock instance
		Return: Non-zero if the clock is stopped, and zero if it is running


		-----
		aclock_elapsedDHMS

		Break out the elapsed time into days,
		hours, minutes, and seconds.  Those
		are returned in the passed parameters.

		Parameter: The elapsed time
		Parameter: A pointer to a double to store the number of days of elapsed time
		Parameter: A pointer to a double to store the number of hours of elapsed time in the days
		Parameter: A pointer to a double to store the number of minutes of elapsed time in the hour
		Parameter: A pointer to a double to store the number of seconds of elapsed time in the minute
		Return: The passed-in elapsed time


	------------------------------
	atm.c - Adept Time

		-----
		atm_allocate

		Allocate the memory for an atm structure.
		Allocates the memory for the enclosing structure and for the components.

		Return:    Pointer to the new instance.


		-----
		atm_free

		Free the memory that was allocated for an atm structure.

		Parameter: The atm instance to be freed.
		Return:    NULL pointer.


		-----
		atm_create_now

		Create an atm instance initialized with the current time.

		Return:    Pointer to the new instance.


		-----
		atm_create_from_time_t

		Create an atm instance initialized with the specified time.

		Parameter: The time to initialize the new instance with.
		Return:    Pointer to the new instance.


		-----
		atm_create_from_gmtime

		Create an atm instance initialized with the specified gm time.

		Parameter: The time to initialize the new instance with.
		Return:    Pointer to the new instance.


		-----
		atm_create_from_loctime

		Create an atm instance initialized with the specified local time.

		Parameter: The time to initialize the new instance with.
		Return:    Pointer to the new instance.


		-----
		atm_copy

		Create a copy of an atm instance.

		Parameter: The time instance to be copied.
		Return:    Pointer to the new instance.


		-----
		atm_set_now

		Set or create an atm instance initialized with the current time.

		Parameter: The time instance to be reset to the current time.


		-----
		atm_set_original

		Set an atm instance to its original time.
		The original time is the time that was set when the instance was allocated
		and initialized.  It is retained over the lifetime of the instance, so the
		instance can be returned to its originally set time.

		NOTE: Does nothing if the supplied atm instance is NULL

		Parameter: The time instance to be reset to its original value.


		-----
		atm_set_from_time_t

		Set or create an atm instance initialized with the specified time.

		Parameter: The time instance to be reset.
		Parameter: The new time to set the instance with.


		-----
		atm_set_from_gmtime

		Set or create an atm instance initialized with the specified gm time.

		Parameter: The time instance to be reset.
		Parameter: The new time to set the instance with.


		-----
		atm_set_from_localtime

		Set or create an atm instance initialized with the specified local time.

		Parameter: The time instance to be reset.
		Parameter: The new time to set the instance with.


		-----
		atm_compare

		Compare two atm instances.

		Parameter: The left side of the comparison.
		Parameter: The right side of the comparison.
		Parameter: The comparison mode to use.
		Return:    A number less than, equal to, or greater than zero if
		left is less than, equal to, or greater than right, respectively.


		-----
		atm_is_equal

		Determine if left is a time that is equal to right.

		Parameter: The left side of the comparison.
		Parameter: The right side of the comparison.
		Parameter: The comparison mode to use.
		Return:    1 if true, 0 if false;


		-----
		atm_is_before

		Determine if left is a time that is before (less than) right.

		Parameter: The left side of the comparison.
		Parameter: The right side of the comparison.
		Parameter: The comparison mode to use.
		Return:    1 if true, 0 if false;


		-----
		atm_is_after

		Determine if left is a time that is after (greater than) right.

		Parameter: The left side of the comparison.
		Parameter: The right side of the comparison.
		Parameter: The comparison mode to use.
		Return:    1 if true, 0 if false;


		-----
		atm_compare_date

		Compare the date components of two atm instances.

		Called when comparing two atm instances with
		the atm_comparison_mode of DATEONLY or DATEANDTIME.

		Parameter: The left side of the comparison.
		Parameter: The right side of the comparison.
		Return:    A number less than, equal to, or greater than zero if
		left is less than, equal to, or greater than right, respectively.


		-----
		atm_compare_time

		Compare the time components of two atm instances.

		Called when comparing two atm instances with
		the atm_comparison_mode of TIMEONLY or DATEANDTIME.

		Parameter: The left side of the comparison.
		Parameter: The right side of the comparison.
		Return:    A number less than, equal to, or greater than zero if
		left is less than, equal to, or greater than right, respectively.


		-----
		atm_earliest

		Determine the earliest of two atm instances.

		Parameter: The left side of the comparison.
		Parameter: The right side of the comparison.
		Parameter: The comparison mode to use.
		Return:    Pointer to the earliest of the two atm instances.
		If the two are equal, return the second parameter.


		-----
		atm_latest

		Determine the latest of two atm instances.

		Parameter: The left side of the comparison.
		Parameter: The right side of the comparison.
		Parameter: The comparison mode to use.
		Return:    Pointer to the latest of the two atm instances.
		If the two are equal, return the second parameter.


	------------------------------
	atm_range.c - Adept Time Range

		-----
		atm_range_allocate

		Allocate the memory for an atm_range structure.
		Allocates the memory for the enclosing structure and for the components.

		Return:    Pointer to the new instance.


		-----
		atm_range_free

		Free the memory that was allocated for an atm_range structure.

		Parameter: The time range to be freed.
		Return:    NULL pointer.


		-----
		atm_range_create

		Create a time range with copies of the supplied begin and end times.
		The times do not need to be in order.
		This function sets the beginning of the range to the earliest time and
		sets the end of the range to latest time.

		Parameter: A time that is part of the range.
		Parameter: A time that is part of the range.
		Return:    Pointer to the new instance.


		-----
		atm_range_copy

		Create a copy of a time range.

		Parameter: The time range to be copied.
		Return:    Pointer to the new instance.


		-----
		atm_range_set

		Set the range with copies of the supplied begin and end times.
		The times do not need to be in order.
		This function sets the beginning of the range to the earliest time and
		sets the end of the range to latest time.

		Parameter: The time range to be reset.
		Parameter: A time that is part of the range.
		Parameter: A time that is part of the range.


		-----
		atm_range_is_equal

		Determine if the begin and end times of two atm ranges are equal.

		Parameter: The left side of the comparison.
		Parameter: The right side of the comparison.
		Parameter: The comparison mode.
		Return:    1 if true, 0 if false.


		-----
		atm_is_in_range

		Determine if the atm is between the begin and end times of the atm range (inclusive).

		Parameter: The time to check.
		Parameter: The range to use for the comparison..
		Parameter: The comparison mode.
		Return:    1 if true, 0 if false.


		-----
		atm_is_before_range

		Determine if the atm is before the begin time of the atm range.

		Parameter: The time to check.
		Parameter: The range to use for the comparison..
		Parameter: The comparison mode.
		Return:    1 if true, 0 if false.


		-----
		atm_is_after_range

		Determine if the atm is after the end time of the atm range.

		Parameter: The time to check.
		Parameter: The range to use for the comparison..
		Parameter: The comparison mode.
		Return:    1 if true, 0 if false.
